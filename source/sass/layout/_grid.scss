@import "../variables/media";
@import "../variables/typography";


// @formatter:off

$grid-num-columns:              12;
$grid-gutter:                   2rem;
$grid-margin:                   4rem;
$grid-margin-small:             2rem;
$grid-max-width:                96rem;
$grid-root-font-size:           10 !default; // without the 'px' postfix

// column default class name
$grid-column-class:             'col';

// collection of breakpoints their corresponding column class post-fixes.
// e.g. 'md' will create 'col-md-1', 'pre-md-1', 'post-md-1', ...etc.
$grid-breakpoints:              (
                                    $viewport-medium:   'md',
                                    $viewport-small:    'sm'
                                );

// calculate the maximum width that can be applied without cutting into the grid margins
// set in rem, so it is converted into 16px font size calculation. Because media queries ignore the actual font size that is set on the HTML.
$grid-margin-breakpoint:        (($grid-max-width + $grid-gutter + $grid-margin * 2) - .1rem * ( $grid-root-font-size / 16 ));
$grid-small-margin-breakpoint:  $screen-medium-and-down;


// @formatter:on

// Calculates the percentage width of a column
@function grid-col-span($span) {

    @return ($span / $grid-num-columns) * 100%;

}


[class^="grid-bounds"],
[class*=" grid-bounds"] {

    display: block;
    max-width: $grid-max-width;
    margin-left: auto;
    margin-right: auto;

    // switch to fixed margins when the auto margin drops below the margin that is set.
    @media (max-width: #{$grid-margin-breakpoint}) {
        max-width: none;
        margin-left: $grid-margin;
        margin-right: $grid-margin;
    }

    @media #{$grid-small-margin-breakpoint} {
        margin-left: $grid-margin-small;
        margin-right: $grid-margin-small;
    }

    // switches to full width with padding instead of margins.
    &[class*="--break"] {

        @media #{$screen-medium-and-down} {

            max-width: none;
            margin-left: 0;
            margin-right: 0;

            > * {
                padding-left: $grid-margin-small;
                padding-right: $grid-margin-small;
            }

        }

    }

}


// @formatter:off


%grid-base {

      // removes all whitespace
    font-family: monospace;
    letter-spacing: -.65em;

    display: block;
    max-width: $grid-max-width + $grid-gutter;
    margin-left: auto;
    margin-right: auto;
    text-align: left;

    // switch to fixed margins when the auto margin drops below the margin that is set.
    @media (max-width: #{$grid-margin-breakpoint}) {
        max-width: none;
        margin-left:  #{$grid-margin - $grid-gutter/2};
        margin-right: #{$grid-margin - $grid-gutter/2};
    }

    @media #{$grid-small-margin-breakpoint} {
        margin-left:  #{$grid-margin-small - $grid-gutter/2};
        margin-right: #{$grid-margin-small - $grid-gutter/2};
    }



}

.grid {

    @extend %grid-base;

    &--embed {

        @extend %grid-base;
        margin-left: 0;
        margin-right: 0;

    }

    &--center {

        @extend %grid-base;
        text-align: center;

    }

    &--right {

        @extend %grid-base;
        text-align: right;

    }

    &--fill-height {

        @extend %grid-base;
        min-height: 100%;

        [class^="#{$grid-column-class}-"],
        [class*=" #{$grid-column-class}-"] {
            min-height: 100%;
        }

    }

}



%grid-column-base {

    display: inline-block;
    font-family: $font-stack-body;  // reset font settings
    letter-spacing: normal;         // reset font spacing
    margin-left: $grid-gutter/2;
    margin-right: $grid-gutter/2;
    position: relative;
    float: none;
    text-align: left;
    vertical-align: top;
    box-sizing: border-box;

    &.baseline { vertical-align: baseline; }

}

// Each column gets its own specific class name for the best performance
@for $n from 1 through $grid-num-columns {

    .#{$grid-column-class}-#{$n} {
        @extend %grid-column-base;
        width: calc(#{grid-col-span($n)} - #{$grid-gutter});
    }

    @if($n < $grid-num-columns){
        .pre-#{$n} { margin-left: calc(#{grid-col-span($n)} + #{$grid-gutter}); }
        .post-#{$n} { margin-right: calc(#{grid-col-span($n)} + #{$grid-gutter}); }
    }

}


// Run through each breakpoint setting specified in the grid-breakpoints and generate the breakpoint specific classes.
@each $grid-breakpoint, $size-modifier in $grid-breakpoints {

    // generate breakpoint specific column classes
    @for $n from 1 through $grid-num-columns {

      .#{$grid-column-class}-#{$size-modifier}-#{$n} { @extend %grid-column-base; }

    }

    @media (max-width: $grid-breakpoint) {

        // start from 0 so we can add a pre and post reset - per breakpoint
        @for $n from 0 through $grid-num-columns {

            @if( $n > 0 ) {

                // apply breakpoint specific width
                .#{$grid-column-class}-#{$size-modifier}-#{$n} { width: calc(#{grid-col-span($n)} - #{$grid-gutter}); }

            }

            @if( $n < $grid-num-columns){

                .pre-#{$size-modifier}-#{$n}  { margin-left:  calc(#{grid-col-span($n)} + #{$grid-gutter}); }
                .post-#{$size-modifier}-#{$n} { margin-right: calc(#{grid-col-span($n)} + #{$grid-gutter}); }

            }
        }

    }

}


