// Px to em
@function em($px, $context: 16px) {
	@return ($px / $context) * 1em;
}

// Px to rem
@function rem($px, $context: 16px) {
	@return ($px / $context) * 1rem;
}

// Px to viewport unit, always needs context
@function vh($px, $context) {
	@return ($px / $context) * 100 * 1vh;
}
@function vw($px, $context) {
	@return ($px / $context) * 100 * 1vw;
}

@mixin background-cover($horizontal: center, $vertical: center) {
	background-position: $horizontal $vertical;
	background-size: cover;
}

// Responsive breakpoints in ems - http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/
@mixin breakpoint($point) {
	@if $point == small-max {
		@media only screen and (max-width: em($breakpoint-medium)) { @content; }
	}
	@else if $point == medium-min {
		@media only screen and (min-width: em($breakpoint-medium + 1)) { @content; }
	}
	@else if $point == medium-only {
		@media only screen and (min-width: em($breakpoint-medium + 1)) and (max-width: em($breakpoint-large)) { @content; }
	}
	@else if $point == medium-max {
		@media only screen and (max-width: em($breakpoint-large)) { @content; }
	}
	@else if $point == large-min {
		@media only screen and (min-width: em($breakpoint-large + 1)) { @content; }
	}
	@else if $point == large-only {
		@media only screen and (min-width: em($breakpoint-large + 1)) and (max-width: em($breakpoint-xlarge - 1)) { @content; }
	}
	@else if $point == xlarge-min {
		@media only screen and (min-width: em($breakpoint-xlarge)) { @content; }
	}
	@else if $point == xxlarge-min {
		@media only screen and (min-width: em($breakpoint-xxlarge)) { @content; }
	}
}
@mixin screen-small-max { @include breakpoint(small-max) { @content; } }
@mixin screen-medium-min { @include breakpoint(medium-min) { @content; } }
@mixin screen-medium-only { @include breakpoint(medium-only) { @content; } }
@mixin screen-medium-max { @include breakpoint(medium-max) { @content; } }
@mixin screen-large-min { @include breakpoint(large-min) { @content; } }
@mixin screen-large-only { @include breakpoint(large-only) { @content; } }
@mixin screen-xlarge-min { @include breakpoint(xlarge-min) { @content; } }
@mixin screen-xxlarge-min { @include breakpoint(xxlarge-min) { @content; } }

// Make element completely cover parent element
@mixin cover($position: absolute) {
	bottom: 0;
	height: 100%;
	left: 0;
	position: $position;
	right: 0;
	top: 0;
	width: 100%;
}

// Clear floats easily - http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	&:after {
		clear: both;
		content: '';
		display: table;
	}
}

@mixin fill-container($ratio: 16/9) {
	&:before {
		content: '';
		display: block;
		height: 0;
		padding-bottom: (1 / $ratio) * 100%;
	}
}

@mixin font-face($family, $file, $weight: 400, $style: normal) {
	@font-face {
		font-family: $family;
		font-style: $style;
		font-weight: $weight;
		src: url('#{$font-folder}#{$file}.eot');
		src: url('#{$font-folder}#{$file}.eot?#iefix') format('embedded-opentype'),
			 url('#{$font-folder}#{$file}.woff') format('woff'),
			 url('#{$font-folder}#{$file}.ttf') format('truetype');
	}
}

@mixin form-element-clear-styling() {
	-moz-appearance: none;
	-webkit-appearance: none;
	appearance: none;
	border-radius: 0;
}

// ul/ol without styling
@mixin list-unstyled() {
	list-style: none;
	padding-left: 0;
}

// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/
@mixin media-object() {
	overflow: hidden;

	&:first-child {
		float: left;
	}

	&:last-child {
		overflow: hidden;
	}
}

@mixin mobile-scrolling() {
	overflow-y: scroll;
	-webkit-overflow-scrolling: touch;
}

@mixin orientation-landscape() {
	@media screen and (orientation: landscape) { @content; }
}

@mixin orientation-portrait() {
	@media screen and (orientation: portrait) { @content; }
}

// Form input placeholder
@mixin placeholder() {
	&::-moz-placeholder           { @content; } // Firefox 19+
	&:-ms-input-placeholder       { @content; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { @content; } // Safari and Chrome
}

// Preload image with pseudo element - http://www.thecssninja.com/css/even-better-image-preloading-with-css2
@mixin preload-image($image) {
	&:before {
		content: url(#{$image});
		display: none;
	}
}

// Add styles for retina screens
@mixin retina($ratio: 1.3) {
	@media
		only screen and (-webkit-min-device-pixel-ratio: $ratio),
		only screen and (min--moz-device-pixel-ratio: $ratio),
		only screen and (-o-min-device-pixel-ratio: #{$ratio} / 1),
		only screen and (min-resolution: #{round($ratio*96)}dpi),
		only screen and (min-resolution: #{$ratio}dppx) {
			@content;
		}
}

// Clip single line text with '...' - https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
@mixin text-ellipsis($display: block, $width: 100%) {
	$display: $display;
	max-width: $width;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin transition-all() {
	transition: all $animation-speed-out;

	&:hover,
	&:focus,
	&.is-active {
		transition-duration: $animation-speed-in;
	}
}
@mixin transition-single($property, $default, $hover) {
	#{$property}: $default;
	transition: #{$property} $animation-speed-out;

	&:hover,
	&:focus,
	&.is-active {
		#{$property}: $hover;
		transition-duration: $animation-speed-in;
	}
}

// CSS triangles
@mixin triangle($placement, $size, $color) {
	position: relative;

	&:after {
		border: $size transparent solid;
		content: '';
		height: 0;
		position: absolute;
		width: 0;

		@if ($placement == top) {
			border-bottom-color: $color;
			bottom: 100%;
			left: calc(50% - #{$size});
		}

		@else if ($placement == right) {
			border-left-color: $color;
			left: 100%;
			top: calc(50% - #{$size});
		}

		@else if ($placement == bottom) {
			border-top-color: $color;
			left: calc(50% - #{$size});
			top: 100%;
		}

		@else if ($placement == left) {
			border-right-color: $color;
			right: 100%;
			top: calc(50% - #{$size});
		}
	}
}

// Vertical align an element - https://css-tricks.com/centering-in-the-unknown/
@mixin vertical-align($element, $align: middle) {
	&:before {
		content: '';
		display: inline-block;
		height: 100%;
		margin-left: -0.25em;
		vertical-align: $align;
	}

	#{$element} {
		display: inline-block !important;
		vertical-align: $align;
	}
}